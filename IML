import numpy as np
# X = (hours sleeping, hours studying), y = test score of the student
X = np.array(([2, 9], [1, 5], [3, 6], [2, 8], [1, 4], [4, 7], [3, 5], [2, 7], [1, 3], [3, 4],
              [4, 8], [2, 6], [1, 2], [3, 3], [4, 6], [2, 5], [1, 1], [3, 2], [4, 5], [2, 4],
              [1, 0], [3, 1], [4, 4], [2, 3], [1, 9], [3, 0], [4, 3], [2, 2], [1, 8], [3, 7],
              [4, 2], [2, 1], [1, 7], [3, 6], [4, 1], [2, 0], [1, 6], [3, 5], [4, 0], [2, 9],
              [1, 5], [3, 4], [4, 8], [2, 7], [1, 3], [3, 3], [4, 7], [2, 6], [1, 2], [3, 2],
              [4, 6], [2, 5], [1, 1], [3, 1], [4, 5], [2, 4], [1, 0], [3, 0], [4, 4], [2, 3],
              [1, 9], [3, 8], [4, 3], [2, 2], [1, 8], [3, 7], [4, 2], [2, 1], [1, 7], [3, 6],
              [4, 1], [2, 0], [1, 6], [3, 5], [4, 0], [2, 9], [1, 5], [3, 4], [4, 8], [2, 7],
              [1, 3], [3, 3], [4, 7], [2, 6], [1, 2], [3, 2], [4, 6], [2, 5], [1, 1], [3, 1],
              [4, 5], [2, 4], [1, 0], [3, 0], [4, 4], [2, 3], [1, 9], [3, 8], [4, 3], [2, 2],
              [1, 8], [3, 7], [4, 2], [2, 1], [1, 7], [3, 6], [4, 1], [2, 0], [1, 6],[3,5],
[4, 0], [2, 9], [1, 5], [3, 4], [4, 8], [2, 7], [1, 3], [3, 3], [4, 7], [2, 6],
[1, 2], [3, 2], [4, 6], [2, 5], [1, 1], [3, 1], [4, 5], [2, 4], [1, 0], [3, 0],
[4, 4], [2, 3], [1, 9], [3, 8], [4, 3], [2, 2], [1, 8], [3, 7], [4, 2], [2, 1],
[1, 7]),dtype=float)

y = np.array(([92], [86], [89], [91], [82], [85], [88], [90], [80], [83],
[95], [81], [75], [79], [87], [76], [70], [78], [84], [74],
[68], [77], [86], [73], [97], [72], [85], [71], [96], [89],
[84], [70], [95], [88], [67], [94], [87], [66], [93], [90],
[65], [92], [86], [89], [91], [82], [85], [88], [90], [80],
[83], [95], [81], [75], [79], [87], [76], [70], [78], [84],
[74], [68], [77], [86], [73], [97], [72], [85], [71], [96],
[89], [84], [70], [95], [88], [67], [94], [87], [66], [93],
[90], [65], [92], [86], [89], [91], [82], [85], [88], [90],
[80], [83], [95], [81], [75], [79], [87], [76], [70], [78],
[84], [74], [68], [77], [86], [73], [97], [72], [85], [71],
[96], [89], [84], [70], [95], [88], [67], [94], [87], [66],
[93], [90], [65], [92], [86], [89], [91], [82], [85], [88],
[90], [80], [83], [95], [81], [75], [79], [87], [76], [70],
[78]), dtype=float)


# scale units
X = X/np.amax(X, axis=0) #maximum of X array
y = y/100 # maximum test score is 100

class NeuralNetwork(object):
    def __init__(self):
        #parameters
        self.inputSize = 2
        self.outputSize = 1
        self.hiddenSize = 3
        
        #weights
        self.W1 = np.random.randn(self.inputSize, self.hiddenSize) # (3x2) weight matrix from input to hidden layer
        self.W2 = np.random.randn(self.hiddenSize, self.outputSize) # (3x1) weight matrix from hidden to output layer
        
    def feedForward(self, X):
        #forward propogation through the network
        self.z = np.dot(X, self.W1) #dot product of X (input) and first set of weights (3x2)
        self.z2 = self.sigmoid(self.z) #activation function
        self.z3 = np.dot(self.z2, self.W2) #dot product of hidden layer (z2) and second set of weights (3x1)
        output = self.sigmoid(self.z3)
        return output
        
    def sigmoid(self, s, deriv=False):
        if (deriv == True):
            return s * (1 - s)
        return 1/(1 + np.exp(-s))
    
    def backward(self, X, y, output):
        #backward propogate through the network
        self.output_error = y - output # error in output
        self.output_delta = self.output_error * self.sigmoid(output, deriv=True)
        
        self.z2_error = self.output_delta.dot(self.W2.T) #z2 error: how much our hidden layer weights contribute to output error
        self.z2_delta = self.z2_error * self.sigmoid(self.z2, deriv=True) #applying derivative of sigmoid to z2 error
        
        self.W1 += X.T.dot(self.z2_delta) # adjusting first set (input -> hidden) weights
        self.W2 += self.z2.T.dot(self.output_delta) # adjusting second set (hidden -> output) weights
        
    def train(self, X, y):
        output = self.feedForward(X)
        self.backward(X, y, output)
        
NN = NeuralNetwork()

for i in range(1000): #trains the NN 1000 times
    if (i % 100 == 0):
        print("Loss: " + str(np.mean(np.square(y - NN.feedForward(X)))))
    NN.train(X, y)
        
print("Input: " + str(X))
print("Actual Output: " + str(y))
print("Loss: " + str(np.mean(np.square(y - NN.feedForward(X)))))
print("\n")
print("Predicted Output: " + str(NN.feedForward(X)))
